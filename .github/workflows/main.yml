name: Trading Bot Live
on:
  push:
    branches: [ main, master ]
  schedule:
    - cron: '*/5 * * * *'  # Runs every 5 minutes
  workflow_dispatch:
    inputs:
      account_type:
        description: 'Account type (cent/standard)'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - cent

permissions:
  contents: read
  actions: write

jobs:
  trading-bot:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b  # v3.0.2
      
      - uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435  # v4.5.0
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          pip install --no-cache-dir -r requirements.txt
          
      - name: Download MT5
        run: |
          Invoke-WebRequest -Uri "https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/mt5setup.exe" -OutFile mt5setup.exe
          
      - name: Install MT5
        run: |
          Start-Process -FilePath "mt5setup.exe" -ArgumentList "/auto" -Wait
          Start-Sleep -Seconds 30  # Wait for MT5 to initialize
          
          # Add MT5 terminal path to system PATH
          $env:Path += ";C:\Program Files\MetaTrader 5"
          [Environment]::SetEnvironmentVariable("PATH", $env:Path, [System.EnvironmentVariableTarget]::Machine)
          
          # Verify MT5 installation
          if (!(Test-Path "C:\Program Files\MetaTrader 5\terminal64.exe")) {
            Write-Error "MT5 installation failed - terminal64.exe not found"
            exit 1
          }
          
      - name: Run backtest
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          EXNESS_ACCOUNT: ${{ secrets.EXNESS_ACCOUNT }}
          EXNESS_PASSWORD: ${{ secrets.EXNESS_PASSWORD }}
          EXNESS_SERVER: ${{ secrets.EXNESS_SERVER }}
        run: |
          python scalping_bot.py --mode backtest --account ${{ github.event.inputs.account_type || 'standard' }}
          
      - name: Save backtest results
        if: success()
        run: |
          New-Item -ItemType Directory -Path "_artifacts" -Force
          if (Test-Path "model.pkl") { Copy-Item "model.pkl" "_artifacts/" }
          if (Test-Path "scaler.pkl") { Copy-Item "scaler.pkl" "_artifacts/" }
          Compress-Archive -Path "_artifacts/*" -DestinationPath "backtest_results.zip" -Force
          
      - name: Run trading bot
        if: success()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          EXNESS_ACCOUNT: ${{ secrets.EXNESS_ACCOUNT }}
          EXNESS_PASSWORD: ${{ secrets.EXNESS_PASSWORD }}
          EXNESS_SERVER: ${{ secrets.EXNESS_SERVER }}
        run: |
          python scalping_bot.py --mode live --account ${{ github.event.inputs.account_type || 'standard' }}

      - name: Upload model files
        if: always()
        run: |
          $artifactName = "model-files"
          
          # Ensure files exist before trying to upload
          if ((Test-Path "model.pkl") -or (Test-Path "scaler.pkl")) {
            New-Item -ItemType Directory -Path "_artifacts" -Force
            if (Test-Path "model.pkl") { Copy-Item "model.pkl" "_artifacts/" }
            if (Test-Path "scaler.pkl") { Copy-Item "scaler.pkl" "_artifacts/" }
            Compress-Archive -Path "_artifacts/*" -DestinationPath "${artifactName}.zip" -Force
            
            $headers = @{
              "Authorization" = "Bearer ${{ github.token }}"
              "Content-Type" = "application/zip"
            }
            
            $url = "https://api.github.com/repos/${{ github.repository }}/actions/artifacts"
            
            if (Test-Path "${artifactName}.zip") {
              Invoke-RestMethod -Uri $url -Method Post -Headers $headers -InFile "${artifactName}.zip"
            }
          }


